{"title":"BrowserTools",
"content":"\"\"\"\nBrowserTools：\n這個 tools 不單單是定義了 tools，是在 tools 裡面就定義了 agent、task，並執行了 task.excute()。\n這段代碼定義了一個名為 BrowserTools 的 Python 類別，其中包含一個方法 scrape_and_summarize_website，用於從網站抓取內容並進行摘要。以下是對代碼的逐行解釋：\nimport json - 引入 Python 的 json 模組，用於處理 JSON 格式的數據。\nimport os - 引入 os 模組，用於訪問操作系統功能，比如環境變量。\nimport requests - 引入 requests 模組，用於發送 HTTP 請求。\nfrom crewai import Agent, Task - 從 crewai 模組中引入 Agent 和 Task 類別，這些可能是用於處理自動化任務或人工智能相關功能的類別。\nfrom langchain.tools import tool - 從 langchain.tools 模組中引入 tool 裝飾器，用於定義工具方法。\nfrom unstructured.partition.html import partition_html - 引入用於處理 HTML 內容的 partition_html 函數。\nBrowserTools 類別定義了 scrape_and_summarize_website 方法：\n使用 @tool(\"Scrape website content\") 裝飾器。\n方法接受一個參數 website，表示要抓取內容的網站 URL。\n構建一個用於向 browserless API 發送請求的 URL，其中包含從環境變量獲取的 API 密鑰。\n創建一個 payload，其中包含要抓取的網站 URL，並將其轉換為 JSON 格式。\n設定 HTTP 請求頭。\n使用 requests 發送 POST 請求到 browserless API，獲取網站的 HTML 內容。\n使用 partition_html 函數處理獲取的 HTML 文本，將其分割為多個元素。\n進行文本處理，將元素轉換為字符串並分割成大小為 8000 字符的塊。\n對每個文本塊進行摘要處理：\n創建一個 Agent 並設置其角色、目標和背景故事。\n創建一個 Task，\n其中包括 Agent 和對文本塊進行摘要的描述。\n執行 Task 來產生摘要。\n將所有摘要收集到一個列表中。\n最後，將所有摘要連接成一個字符串並返回。\n這個方法的主要功能是使用 browserless API 從給定的網站抓取 HTML 內容，然後將這些內容分割、處理並通過 AI 代理（如 Agent 和 Task）生成摘要。這個過程可能用於自動化地從網站收集並簡化信息，特別是在需要快速獲得網站主要內容摘要的情況下。整個過程都以程式化的方式進行，顯示了現代技術在資訊處理和自動化方面的應用。\n\"\"\"\nimport json\nimport os\n\nimport requests\nfrom crewai import Agent, Task\nfrom langchain.tools import tool\nfrom unstructured.partition.html import partition_html\n\nclass BrowserTools():\n\n  @tool(\"Scrape website content\")\n  def scrape_and_summarize_website(website):\n    \"\"\"Useful to scrape and summarize a website content\"\"\"\n    url = f\"https://chrome.browserless.io/content?token={os.environ['BROWSERLESS_API_KEY']}\"\n    payload = json.dumps({\"url\": website})\n    headers = {'cache-control': 'no-cache', 'content-type': 'application/json'}\n    response = requests.request(\"POST\", url, headers=headers, data=payload)\n    elements = partition_html(text=response.text)\n    content = \"\\n\\n\".join([str(el) for el in elements])\n    content = [content[i:i + 8000] for i in range(0, len(content), 8000)]\n    summaries = []\n    for chunk in content:\n      agent = Agent(\n          role='Principal Researcher',\n          goal=\n          'Do amazing research and summaries based on the content you are working with',\n          backstory=\n          \"You're a Principal Researcher at a big company and you need to do research about a given topic.\",\n          allow_delegation=False)\n      task = Task(\n          agent=agent,\n          description=\n          f'Analyze and summarize the content below, make sure to include the most relevant information in the summary, return only the summary nothing else.\\n\\nCONTENT\\n----------\\n{chunk}'\n      )\n      summary = task.execute()\n      summaries.append(summary)\n    return \"\\n\\n\".join(summaries)",
"file_name":null,
"description":null,
"timestamp":"2024-02-11T17:30:29.151816",
"user_id":"default"}