{"title":"search_duckduckgo","content":"# 以下是利用 autogen 原本預設的 find_papers_arxiv.py 丟給 chatgpt3.5 請他依樣畫葫蘆提供 DuckDuckGoSearchRun 的 skills 程式碼。\nimport os\nimport json\nimport hashlib\nfrom langchain.tools import DuckDuckGoSearchRun\n\ndef search_duckduckgo(query, max_results=10):\n    \"\"\"\n    Searches DuckDuckGo for the given query using langchain.tools.DuckDuckGoSearchRun, then returns the search results.\n\n    Args:\n        query (str): The search query.\n        max_results (int, optional): The maximum number of search results to return. Defaults to 10.\n\n    Returns:\n        results (list): A list of dictionaries containing search results, each dictionary typically includes fields such as 'title', 'snippet', and 'url'.\n\n    Example:\n        >>> results = search_duckduckgo(\"attention is all you need\")\n        >>> print(results)\n    \"\"\"\n\n    key = hashlib.md5((\"search_duckduckgo(\" + str(max_results) + \")\" + query).encode(\"utf-8\")).hexdigest()\n    # Create the cache if it doesn't exist\n    cache_dir = \".cache\"\n    if not os.path.isdir(cache_dir):\n        os.mkdir(cache_dir)\n\n    fname = os.path.join(cache_dir, key + \".cache\")\n\n    # Cache hit\n    if os.path.isfile(fname):\n        with open(fname, \"r\", encoding=\"utf-8\") as fh:\n            data = json.load(fh)\n        return data\n\n    duckduckgo_search = DuckDuckGoSearchRun(query=query, max_results=max_results)\n    results = duckduckgo_search.run()\n\n    # Save to cache\n    with open(fname, \"w\", encoding=\"utf-8\") as fh:\n        json.dump(results, fh)\n\n    return results","file_name":null,"description":null,"timestamp":"2024-02-21T00:31:24.261467","user_id":"default"}