{"title":"SearchTools","content":"\"\"\"\nSearchTools：\n這段代碼定義了一個名為 SearchTools 的 Python 類別，其中包含兩個用於進行網路搜尋的方法：search_internet 和 search_news。這些方法通過一個外部 API 實現對互聯網和新聞的搜索。以下是對代碼的逐行解釋：\n\n共通部分：\n\nimport json - 引入 Python 的 json 模組，用於處理 JSON 格式的數據。\nimport os - 引入 os 模組，用於訪問操作系統的功能，例如環境變量。\nimport requests - 引入 requests 模組，用於發送 HTTP 請求。\nfrom langchain.tools import tool - 從 langchain.tools 模組中引入 tool 裝飾器，用於定義工具方法。\nsearch_internet 方法：\n\n使用 @tool(\"Search the internet\") 裝飾器。\n方法接受一個參數 query，表示要搜索的查詢內容。\n定義要返回的最高結果數量。\n設定 API URL 為 Google SERPer（一種搜索引擎結果頁面解析服務）的搜索接口。\n創建一個 payload 包含搜索查詢，並轉換為 JSON 格式。\n設定 HTTP 請求頭，包括 API 密鑰和內容類型。\n使用 requests 發送 POST 請求並接收響應。\n從響應中提取有關搜索結果的數據。\n遍歷並處理最多四個搜索結果，格式化為包含標題、鏈接和摘要的字符串。\n返回格式化的搜索結果。\nsearch_news 方法：\n\n與 search_internet 方法類似，但專注於搜索新聞。\n方法使用不同的 API URL (https://google.serper.dev/news) 進行新聞搜索。\n其他操作與\nsearch_internet 方法類似，包括創建 payload、發送請求、處理響應、格式化結果。\n\n總結：\n\n這兩個方法都使用了第三方 API（SERPer API），透過 Google 搜索引擎進行網絡和新聞的搜索。\n方法中的錯誤處理（例如 try-except 塊和 next）用於處理潛在的鍵值缺失情況。\n返回的結果包括搜索到的項目的標題、鏈接和摘要，格式化為易於閱讀的字符串。\n這些工具類別的方法可以在需要自動化搜索互聯網或新聞資訊的應用場景中使用。\n整體而言，這段代碼展示了如何利用外部 API 和 Python 編程來實現自動化的網絡搜尋功能，對於需要快速獲取和整理網上資訊的場景特別有用。\n\"\"\"\nimport json\nimport os\n\nimport requests\nfrom langchain.tools import tool\n\nclass SearchTools():\n  @tool(\"Search the internet\")\n  def search_internet(query):\n    \"\"\"Useful to search the internet \n    about a a given topic and return relevant results\"\"\"\n    top_result_to_return = 4\n    url = \"https://google.serper.dev/search\"\n    payload = json.dumps({\"q\": query})\n    headers = {\n        'X-API-KEY': os.environ['SERPER_API_KEY'],\n        'content-type': 'application/json'\n    }\n    response = requests.request(\"POST\", url, headers=headers, data=payload)\n    results = response.json()['organic']\n    string = []\n    for result in results[:top_result_to_return]:\n      try:\n        string.append('\\n'.join([\n            f\"Title: {result['title']}\", f\"Link: {result['link']}\",\n            f\"Snippet: {result['snippet']}\", \"\\n-----------------\"\n        ]))\n      except KeyError:\n        next\n\n    return '\\n'.join(string)\n\n  @tool(\"Search news on the internet\")\n  def search_news(query):\n    \"\"\"Useful to search news about a company, stock or any other\n    topic and return relevant results\"\"\"\"\"\n    top_result_to_return = 4\n    url = \"https://google.serper.dev/news\"\n    payload = json.dumps({\"q\": query})\n    headers = {\n        'X-API-KEY': os.environ['SERPER_API_KEY'],\n        'content-type': 'application/json'\n    }\n    response = requests.request(\"POST\", url, headers=headers, data=payload)\n    results = response.json()['news']\n    string = []\n    for result in results[:top_result_to_return]:\n      try:\n        string.append('\\n'.join([\n            f\"Title: {result['title']}\", f\"Link: {result['link']}\",\n            f\"Snippet: {result['snippet']}\", \"\\n-----------------\"\n        ]))\n      except KeyError:\n        next\n\n    return '\\n'.join(string)","file_name":null,"description":null,"timestamp":"2024-02-11T17:31:17.015992","user_id":"default"}