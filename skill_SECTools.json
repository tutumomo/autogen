{"title":"SECTools","content":"\"\"\"\nSECTools：\n這段代碼定義了一個名為 SECTools 的 Python 類別，該類別包含了兩個方法用於搜尋和分析美國證券交易委員會（SEC）提交的報告，特別是 10-Q 和 10-K 表格。以下是對代碼的逐行解釋：\n\n通用部分\nimport os - 引入 os 模組，用於訪問操作系統的功能，例如環境變量。\nimport requests - 引入 requests 模組，用於發送 HTTP 請求。\nfrom langchain.tools import tool - 從 langchain.tools 模組中引入 tool 裝飾器，用於定義工具方法。\nfrom langchain.text_splitter import CharacterTextSplitter - 引入用於文本分割的工具。\nfrom langchain.embeddings import OpenAIEmbeddings - 引入用於生成文本嵌入的 OpenAI 嵌入模型。\nfrom langchain_community.vectorstores import FAISS - 引\n入用於建立向量存儲的 FAISS 庫，以便進行高效的相似性搜索。\n7. from sec_api import QueryApi - 引入用於查詢 SEC 數據的 API 模塊。\n\nfrom unstructured.partition.html import partition_html - 引入用於處理 HTML 文檔的函數。\nsearch_10q 方法\n使用 @tool(\"Search 10-Q form\") 襝飾器。\n接收一個由股票代碼和查詢問題組成的字符串，用管道符（|）分隔。\n使用 SEC API（通過環境變量中的 API 密鑰）構造查詢，以獲取指定股票的最新 10-Q 表格。\n如果找不到相應的文件，返回一個錯誤信息。\n否則，從返回的文件中提取鏈接，並使用 __embedding_search 方法來搜索和提取相關的回答。\nsearch_10k 方法\n類似於 search_10q，但用於搜索 10-K 表格（年度報告）。\n__embedding_search 私有方法\n下載並處理指定 URL 的 HTML 內容。\n使用 partition_html 函數將 HTML 內容分割成多個元素。\n使用 CharacterTextSplitter 將文本劃分為更小的部分，以便處理。\n使用 OpenAIEmbeddings 生成文本的嵌入表示。\n使用 FAISS 庫建立向量存儲，並通過嵌入相似性搜索相關答案。\n返回前四個最相關的文檔內容作為答案。\n__download_form_html 私有方法\n用於從給定的 URL 下載 HTML 內容。\n設置 HTTP 請求頭以模擬常見的瀏覽器行為，以確保成功獲取頁面內容。\n總結：\n這個類通過 SEC API 搜索特定股票的 10-Q 和 10-K 報告，解析報告內容，並使用文本嵌入和向量相似性搜索來回答關於報告內容的特定問題。\n這是一個自動化工具，適用於金融分析師或投資者，用於快速獲取和理解公司的財務報告。\n\"\"\"\nimport os\nimport requests\nfrom langchain.tools import tool\nfrom langchain.text_splitter import CharacterTextSplitter\nfrom langchain.embeddings import OpenAIEmbeddings\nfrom langchain_community.vectorstores import FAISS\n\nfrom sec_api import QueryApi\nfrom unstructured.partition.html import partition_html\n\nclass SECTools():\n  @tool(\"Search 10-Q form\")\n  def search_10q(data):\n    \"\"\"\n    Useful to search information from the latest 10-Q form for a\n    given stock.\n    The input to this tool should be a pipe (|) separated text of\n    length two, representing the stock ticker you are interested and what\n    question you have from it.\n\t\tFor example, `AAPL|what was last quarter's revenue`.\n    \"\"\"\n    stock, ask = data.split(\"|\")\n    queryApi = QueryApi(api_key=os.environ['SEC_API_API_KEY'])\n    query = {\n      \"query\": {\n        \"query_string\": {\n          \"query\": f\"ticker:{stock} AND formType:\\\"10-Q\\\"\"\n        }\n      },\n      \"from\": \"0\",\n      \"size\": \"1\",\n      \"sort\": [{ \"filedAt\": { \"order\": \"desc\" }}]\n    }\n\n    fillings = queryApi.get_filings(query)['filings']\n    if len(fillings) == 0:\n      return \"Sorry, I couldn't find any filling for this stock, check if the ticker is correct.\"\n    link = fillings[0]['linkToFilingDetails']\n    answer = SECTools.__embedding_search(link, ask)\n    return answer\n\n  @tool(\"Search 10-K form\")\n  def search_10k(data):\n    \"\"\"\n    Useful to search information from the latest 10-K form for a\n    given stock.\n    The input to this tool should be a pipe (|) separated text of\n    length two, representing the stock ticker you are interested, what\n    question you have from it.\n    For example, `AAPL|what was last year's revenue`.\n    \"\"\"\n    stock, ask = data.split(\"|\")\n    queryApi = QueryApi(api_key=os.environ['SEC_API_API_KEY'])\n    query = {\n      \"query\": {\n        \"query_string\": {\n          \"query\": f\"ticker:{stock} AND formType:\\\"10-K\\\"\"\n        }\n      },\n      \"from\": \"0\",\n      \"size\": \"1\",\n      \"sort\": [{ \"filedAt\": { \"order\": \"desc\" }}]\n    }\n\n    fillings = queryApi.get_filings(query)['filings']\n    if len(fillings) == 0:\n      return \"Sorry, I couldn't find any filling for this stock, check if the ticker is correct.\"\n    link = fillings[0]['linkToFilingDetails']\n    answer = SECTools.__embedding_search(link, ask)\n    return answer\n\n  def __embedding_search(url, ask):\n    text = SECTools.__download_form_html(url)\n    elements = partition_html(text=text)\n    content = \"\\n\".join([str(el) for el in elements])\n    text_splitter = CharacterTextSplitter(\n        separator = \"\\n\",\n        chunk_size = 1000,\n        chunk_overlap  = 150,\n        length_function = len,\n        is_separator_regex = False,\n    )\n    docs = text_splitter.create_documents([content])\n    retriever = FAISS.from_documents(\n      docs, OpenAIEmbeddings()\n    ).as_retriever()\n    answers = retriever.get_relevant_documents(ask, top_k=4)\n    answers = \"\\n\\n\".join([a.page_content for a in answers])\n    return answers\n\n  def __download_form_html(url):\n    headers = {\n      'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',\n      'Accept-Encoding': 'gzip, deflate, br',\n      'Accept-Language': 'en-US,en;q=0.9,pt-BR;q=0.8,pt;q=0.7',\n      'Cache-Control': 'max-age=0',\n      'Dnt': '1',\n      'Sec-Ch-Ua': '\"Not_A Brand\";v=\"8\", \"Chromium\";v=\"120\"',\n      'Sec-Ch-Ua-Mobile': '?0',\n      'Sec-Ch-Ua-Platform': '\"macOS\"',\n      'Sec-Fetch-Dest': 'document',\n      'Sec-Fetch-Mode': 'navigate',\n      'Sec-Fetch-Site': 'none',\n      'Sec-Fetch-User': '?1',\n      'Upgrade-Insecure-Requests': '1',\n      'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'\n    }\n\n    response = requests.get(url, headers=headers)\n    return response.text","file_name":null,"description":null,"timestamp":"2024-02-11T17:30:58.669470","user_id":"default"}