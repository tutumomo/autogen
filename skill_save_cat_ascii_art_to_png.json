{"title":"save_cat_ascii_art_to_png","content":"\n  ## This is a sample skill. Replace with your own skill function\n  ## In general, a good skill must have 3 sections:\n  ## 1. Imports (import libraries needed for your skill)\n  ## 2. Function definition  AND docstrings (this helps the LLM understand what the function does and how to use it)\n  ## 3. Function body (the actual code that implements the function)\n\n  import numpy as np\n  import matplotlib.pyplot as plt\n  from matplotlib import font_manager as fm\n\n  def save_cat_ascii_art_to_png(filename='ascii_cat.png'):\n      \"\"\"\n      Creates ASCII art of a cat and saves it to a PNG file.\n\n      :param filename: str, the name of the PNG file to save the ASCII art.\n      \"\"\"\n      # ASCII art string\n      cat_art = [\n          \"  /_/  \",\n          \" ( o.o ) \",\n          \" > ^ <  \"\n      ]\n\n      # Determine shape of output array\n      height = len(cat_art)\n      width = max(len(line) for line in cat_art)\n\n      # Create a figure and axis to display ASCII art\n      fig, ax = plt.subplots(figsize=(width, height))\n      ax.axis('off')  # Hide axes\n\n      # Get a monospace font\n      prop = fm.FontProperties(family='monospace')\n\n      # Display ASCII art using text\n      for y, line in enumerate(cat_art):\n          ax.text(0, height-y-1, line, fontproperties=prop, fontsize=12)\n\n      # Adjust layout\n      plt.tight_layout()\n\n      # Save figure to file\n      plt.savefig(filename, dpi=120, bbox_inches='tight', pad_inches=0.1)\n      plt.close(fig)","file_name":null,"description":null,"timestamp":"2024-02-11T17:28:39.606514","user_id":"default"}